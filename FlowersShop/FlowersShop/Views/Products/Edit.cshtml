@model FlowersShop.ViewModels.ProductViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_MyLayout.cshtml";
}

<div class="row">
    <div class="col-xs-12">
        <div class="page-title-box">
            <h4 class="page-title">Accounts </h4>
            <ol class="breadcrumb p-0 m-0">
                <li>
                    <a href="@Url.Action("Index", "HomeAdmin")">FlowersShop</a>
                </li>
                <li>
                    <a href="@Url.Action("Index", "Products")">Products</a>
                </li>
                <li class="active">
                    Create
                </li>
            </ol>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- end row -->

<div class="row">
    <div class="col-xs-12">
        <div class="card-box">

            <div class="row">
                <div class="col-sm-12 col-xs-12 col-md-6">
                    <h3><img src="~/Content/assets/images/logo_sm.png" alt="" height="24"> Create Product </h3>
                    <p class="text-muted font-13 m-b-10">
                        A product is the item offered for sale. A product can be a service or an item. It can be physical or in virtual or cyber form. Every product is made at a cost and each is sold at a price. The price that can be charged depends on the market, the quality, the marketing and the segment that is targeted. Each product has a useful life after which it needs replacement, and a life cycle after which it has to be re-invented. In FMCG parlance, a brand can be revamped, re-launched or extended to make it more relevant to the segment and times, often keeping the product almost the same.
                    </p>

                    <div class="p-20">
                        @using (Html.BeginForm("Edit", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">
                                <h4>Product</h4>
                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.Product.Id)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Product.Price, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Product.Price, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Product.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Product.Quantity, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.Photo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <img src="~/Content/imgs/@Html.DisplayFor(model => model.Product.Photo)" height="150" id="image" alt="" />
                                        @Html.HiddenFor(model => model.Product.Photo)
                                        <input type='file' onchange="readURL(this);" name="photo" />
                                        @Html.ValidationMessageFor(model => model.Product.Photo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Product.Status, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Product.Status, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.Specials, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Product.Specials, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Product.Specials, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Product.Description, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Product.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Categories, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownListFor(model => model.Product.CategoryId, Model.Categories, new { @class = "form-control" })
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <div class="col-sm-8">
                                        <button type="submit" class="btn btn-primary waves-effect waves-light">
                                            Update
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                </div>
            </div>
            <!-- end row -->

        </div> <!-- end ard-box -->
    </div><!-- end col-->

</div>
<!-- end row -->

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#image')
                    .attr('src', e.target.result)
                    .height(150);
            };

            reader.readAsDataURL(input.files[0]);
        }
    }
</script>